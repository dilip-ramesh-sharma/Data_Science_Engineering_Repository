/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UI.Librarian;

import Customer.Customer;
import Employee.Employee;
import Employee.EmployeeDirectory;
import Library.Library;
import Material.Book;
import Material.BookDirectory;
import Rental.Rent;
import Role.LibrarianRole;
import Role.Role;
import Role.SystemAdminRole;
import System.ApplicationSystem;
import System.Branch;
import System.UserAccount;
import System.UserAccountDirectory;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 91730
 */
public class RentReqJPanel extends javax.swing.JPanel {

    private ApplicationSystem applicationsystem;
    private Branch branch;
    private UserAccount useraccount;
    DefaultTableModel viewTableModel;

    
    public RentReqJPanel() {
        initComponents();

    }

    public RentReqJPanel(ApplicationSystem applicationsystem, Branch branch, UserAccount useraccount) {
        initComponents();
        this.viewTableModel = (DefaultTableModel) tableBookRentalTable.getModel();  
        this.applicationsystem = applicationsystem;
        this.branch = branch;
        this.useraccount = useraccount;
        displayBookRentRequest();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rejectBookButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBookRentalTable = new javax.swing.JTable();
        acceptBookButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rejectBookButton.setText("Reject");
        rejectBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectBookButtonActionPerformed(evt);
            }
        });
        add(rejectBookButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 330, 80, 20));

        tableBookRentalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name of Book", "Book Pages", "Languages", "Author", "Genre", "Type of Binding", "Date", "Available", "Rent Price", "Rent Duration", "Serial Number", "Customer Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableBookRentalTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 1070, 210));

        acceptBookButton.setText("Accept");
        acceptBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBookButtonActionPerformed(evt);
            }
        });
        add(acceptBookButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 100, 20));

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Rental Request");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void rejectBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectBookButtonActionPerformed

      int selectedRow = tableBookRentalTable.getSelectedRow();
             if(selectedRow >= 0 ){
            String selectSerialNumber = tableBookRentalTable.getValueAt(selectedRow, 10).toString();
            Library lib = this.branch.getLib();
             ArrayList<Book> bookcollection = lib.getBooklist().getBooklistCollection();
             //update rent with requested
              for(int i =0;i< bookcollection.size();i++ ){
                  long serialNumber = bookcollection.get(i).getRt().getSerialNumber();
                  
               if( serialNumber == Long.valueOf(selectSerialNumber) )
               {
                   Book bk= bookcollection.get(i);
                   bk.setIsAvailableFlag(true);
                  Rent rt = bk.getRt();
                  rt.setBookRequested("DECLINED");
                  bk.setRt(rt);
                  this.applicationsystem.UpdateBookToBranch(bookcollection.get(i).getLocation(),bk);
                  this.applicationsystem.getCustomerList().updateRentStatus(this.useraccount.getAccountId(), rt);
                  break;
               }
              }
               JOptionPane.showMessageDialog(null, "Declined Request");
              
             }
         
    }//GEN-LAST:event_rejectBookButtonActionPerformed

    private void acceptBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBookButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableBookRentalTable.getSelectedRow();
             if(selectedRow >= 0 ){
            String selectSerialNumber = tableBookRentalTable.getValueAt(selectedRow, 10).toString();
            Library lib = this.branch.getLib();
             ArrayList<Book> bookcollection = lib.getBooklist().getBooklistCollection();
              for(int i =0;i< bookcollection.size();i++ ){
                  long serialNumber = bookcollection.get(i).getRt().getSerialNumber();
                  
               if( serialNumber == Long.valueOf(selectSerialNumber) )
               {
                   Book bk= bookcollection.get(i);
                   bk.setIsAvailableFlag(false);
                  Rent rt = bk.getRt();
                  rt.setBookRequested("ACCEPTED");
                  bk.setRt(rt);
                  this.applicationsystem.UpdateBookToBranch(bookcollection.get(i).getLocation(),bk);
                  this.applicationsystem.getCustomerList().updateRentStatus(this.useraccount.getAccountId(), rt);
                  break;
               }
              }
               JOptionPane.showMessageDialog(null, "Accepted Request");
              
        }
   
    }//GEN-LAST:event_acceptBookButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBookButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton rejectBookButton;
    private javax.swing.JTable tableBookRentalTable;
    // End of variables declaration//GEN-END:variables

public String fetchBranchName()
    {
        String BranchName = "";
        String userAccountValue = this.useraccount.getAccountId();      
        ArrayList<Branch> br = this.applicationsystem.getBranches();
        int fetchNumber = 0;
        for(int i=0;i< br.size(); i++){
            String emp = br.get(i).getLib().getEmployeelist().getEmployeelist().get(i).getPersonId();
            if(emp.equals(userAccountValue) ){
                fetchNumber = i;
                break;  
            }
        }
        BranchName = br.get(fetchNumber).getName();
        System.out.println("BRANCH NAME PRINTING "+BranchName);
        return BranchName;
    }

    private void displayBook(){
        viewTableModel.setRowCount(0);

          Library lib = this.branch.getLib();
          ArrayList<Book> bookcollection = lib.getBooklist().getBooklistCollection();
          

          for(int i =0;i< bookcollection.size();i++ ){
               Object row[] = new Object[11];
               if(bookcollection.get(i).getLocation().equals(useraccount.getAccessTo()))
               {
                     row[0] = bookcollection.get(i).getMaterialName();
                     row[1] = bookcollection.get(i).getNoOfPages();
                     row[2] = bookcollection.get(i).getLanguages();
                     row[3] = bookcollection.get(i).getAuthorName();
                     row[4] = bookcollection.get(i).getGenre();
                     row[5] = bookcollection.get(i).getTypeOfBinding();
                     row[6] = String.valueOf(bookcollection.get(i).getRegisteredDate());
                     row[7] = bookcollection.get(i).getIsAvailableFlag();
                     row[8] = bookcollection.get(i).getRt().getRentPrice();
                     row[9] = bookcollection.get(i).getRt().getRentDuration();
                     row[10] = bookcollection.get(i).getRt().getSerialNumber();
                    
                    viewTableModel.addRow(row);
               }
                  
             
              }    
          }

    private void displayBookRentRequest() {
        
        ArrayList<Customer> cust = this.applicationsystem.getCustomerList().getCustomerlist();
        ArrayList<String> customerArray = new ArrayList<String>();
        ArrayList<String> rentArray = new ArrayList<String>();
        for(int i=0;i<cust.size();i++){
            ArrayList<Rent> rt = cust.get(i).getRentlist();
           for(int j=0;j<rt.size();j++){
               if(rt.get(j).getBookRequested().equals("SENT"));
               {
               customerArray.add(cust.get(i).getCustomerName());
               rentArray.add(rt.get(j).getRentId());
               }

           }
        }
        
       
        Library lib = this.branch.getLib();
        ArrayList<Book> bookcollection = lib.getBooklist().getBooklistCollection();
        
             for(int i =0;i< bookcollection.size();i++ ){
               
               
               if(bookcollection.get(i).getLocation().equals(useraccount.getAccessTo()))
               {
                   for(int j=0;j<customerArray.size();j++){
                   String returnBook = bookcollection.get(i).getRt().getBookRequested();
                   if(rentArray.get(j) == bookcollection.get(i).getRt().getRentId() && returnBook != "RETURNED" )
                   {
                       Object row[] = new Object[12];
                     row[0] = bookcollection.get(i).getMaterialName();
                     row[1] = bookcollection.get(i).getNoOfPages();
                     row[2] = bookcollection.get(i).getLanguages();
                     row[3] = bookcollection.get(i).getAuthorName();
                     row[4] = bookcollection.get(i).getGenre();
                     row[5] = bookcollection.get(i).getTypeOfBinding();
                     row[6] = String.valueOf(bookcollection.get(i).getRegisteredDate());
                     row[7] = bookcollection.get(i).getIsAvailableFlag();
                     row[8] = bookcollection.get(i).getRt().getRentPrice();
                     row[9] = bookcollection.get(i).getRt().getRentDuration();
                     row[10] = bookcollection.get(i).getRt().getSerialNumber();
                      row[11] = customerArray.get(j);
                     viewTableModel.addRow(row);
                   }
                   
                   }
                   
                   
  
               }
                  
             
              } 
         
    }
    }